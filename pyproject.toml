[build-system]
requires = ["setuptools>=69.0.0"] # Minimum version that includes `py.typed` in build output automatically
build-backend = "setuptools.build_meta"

[project]
name = "rss-shim"
version = "0.0.1"
description = "A package to create RSS feeds for sites that do not support them."
readme = "README.md"
authors = [
  { name = "Alex Hedges" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: System Administrators",
  "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Communications",
  "Topic :: Internet",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Utilities",
  "Typing :: Typed",
]
# Required for writing union types as `X | Y`
requires-python = ">=3.10"
license = { text = "CC0-1.0" }
dynamic = ["dependencies"]

[project.optional-dependencies]
dev = [
  "mypy",
  "pre-commit",
  "pylint",
  "types-requests",
]

[project.scripts]
rss-shim = "rss_shim.__main__:main"

[project.urls]
Homepage = "https://github.com/aphedges/rss-shim"

[tool.setuptools.dynamic]
dependencies = { file = "requirements.txt" }

[tool.black]
line-length = 100

[tool.codespell]
ignore-regex = "\\[nt]" # Do not count escaped newlines or tabs as part of a word
# `astroid` is a dependency of pylint
ignore-words-list = "astroid"
quiet-level = 0 # Display all warnings
check-filenames = ""
check-hidden = ""

[tool.mypy]
show_error_codes = true
ignore_missing_imports = true
python_version = "3.11"
strict = true
warn_unreachable = true

[tool.ruff]
fix = true
line-length = 100
# Show full violation messages by setting `RUFF_OUTPUT_FORMAT=full` in environment
output-format = "concise"
show-fixes = true

[tool.ruff.lint]
select = [
  "A", # flake8-builtins
  "ASYNC", # flake8-async
  "B", # flake8-bugbear
  "BLE", # flake8-blind-except
  "C4", # flake8-comprehensions
  "D", # pydocstyle
  "DTZ", # flake8-datetimez
  "E", # pycodestyle error
  "F", # pyflakes
  "FBT", # flake8-boolean-trap
  "FLY", # flynt
  "FURB", # refurb
  "G", # flake8-logging-format
  "I", # isort
  "ICN", # flake8-import-conventions
  "INP", # flake8-no-pep420
  "INT", # flake8-gettext
  "ISC", # flake8-implicit-str-concat
  "LOG", # flake8-logging
  "N", # pep8-naming
  "NPY", # NumPy-specific rules
  "PIE", # flake8-pie
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "RSE", # flake8-raise
  "RUF", # Ruff-specific rules
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "SLF", # flake8-self
  "SLOT", # flake8-slots
  "T10", # flake8-debugger
  "TID", # flake8-tidy-imports
  "UP", # pyupgrade
  "W", # pycodestyle warning
  "YTT", # flake8-2020
]
ignore = [
  # Do not switch to `Path.open()` because `open()` is easier to test with
  # e.g., `open(data_dir / "file_a.txt")` -> `open("test/file_b.txt")`
  "PTH123", # builtin-open (from flake8-use-pathlib)
  # Keep `assert` statements because they are often used to express typing constraints for `mypy`
  # In addition, most people do not run Python with optimized bytecode
  "S101", # assert (from flake8-bandit)
  # Most code we work with is not cryptographically sensitive,
  # so the `random` module is safe to use
  "S311", # suspicious-non-cryptographic-random-usage (from flake8-bandit)
  # Ternary expressions are often less readable than `if`-`else` blocks,
  # so they should not be required
  "SIM108", # if-else-block-instead-of-if-exp (from flake8-simplify)
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.lint.pycodestyle]
# Detect extra-long lines that Black can't handle
max-line-length = 250

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pylint.format]
# Let other tools handle line length
max-line-length = 250

[tool.pylint.imports]
# Need to either set this or stop using the `import X as X` that mypy wants
allow-reexport-from-package = true

[tool.pylint.messages_control]
# Most of these are disabled to prevent issues with dependencies being difficult to inspect
# pylint FAQ recommends disabling:
# - `wrong-import-order` when using `isort`
# - `missing-module-docstring`, `missing-class-docstring`,
#   `missing-function-docstring` when using `pydocstyle`
# Disabled `consider-using-f-string` because handled by `pyupgrade`
# Disabled `logging-not-lazy` because handled by `flake8-logging-format`
# Disabled `broad-exception-caught` because handled by `flake8-blind-except`
disable = """
R,fixme,no-member,unsupported-membership-test,unsubscriptable-object,
unsupported-assignment-operation,not-an-iterable,too-many-lines,wrong-import-order,
missing-module-docstring,missing-class-docstring,missing-function-docstring,
consider-using-f-string,logging-not-lazy,broad-exception-caught
"""

[tool.pylint.reports]
score = false
